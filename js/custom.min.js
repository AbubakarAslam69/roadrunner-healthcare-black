// // SLIDER
function mainSlider1Init() {
	var interleaveOffset = 0.5;
	var swiperOptions = {
		loop: true,
		speed: 1000,
		parallax: true,
		autoplay: false,
		grabCursor: false,
		// pagination: {
		// 	el: '.swiper-pagination',
		// 	clickable: true
		// 	// type: "fraction",
		// },
		// navigation: {
		// 	nextEl: '.swiper-button-next',
		// 	prevEl: '.swiper-button-prev'
		// }
	};

	var homeSlider = new Swiper('.homeSlider', swiperOptions);

	var pageSection = $('.bg-image');
	pageSection.each(function (indx) {
		if ($(this).attr('data-background')) {
			$(this).css('background-image', 'url(' + $(this).data('background') + ')');
		}
	});
}
mainSlider1Init();



//gsap loader

// const tl = gsap.timeline({ duration: 0.1 });
// function preLoader(tl) {
// 	tl.to('.preLoader.black > img', {
// 		delay: 1,
// 		y: 50,
// 		autoAlpha: 0
// 	})
// 		.to('.preLoader.black', {
// 			yPercent: -100
// 		})
// 		.to('.preLoader.white', {
// 			yPercent: -100
// 		})
// 		.to('.preLoader', {
// 			css: {
// 				display: 'none'
// 			}
// 		})

// 		.from('.mouse', {
// 			y: -50,
// 			autoAlpha: 0
// 		})
// 		.from(
// 			'.scroll',
// 			{
// 				autoAlpha: 0,
// 				y: -100,
// 				stagger: 0.05
// 			},
// 			'>-0.5'
// 		)

// 		.from('.navbar-brand > img', {
// 			x: -50,
// 			autoAlpha: 0
// 		})

// 		.from(
// 			'.navbar-nav > li, .form-inline a',
// 			{
// 				autoAlpha: 0,
// 				x: 100,
// 				stagger: 0.05
// 			},
// 			'>-0.5'
// 		)

// 		.from('.slideOne', {
// 			autoAlpha: 0,
// 			yPercent: 100,
// 			stagger: 0.05
// 		});
// 	// .from(
// 	//  '.bg-image',
// 	//  {
// 	//      autoAlpha: 0
// 	//  },
// 	//  '<-0.25'
// 	// )
// }
// $(window).on('load', function () {
// 	let str = window.location.href;
// 	str = str.split('/');
// 	if (str.at(-1) === 'index.php' || str.at(-1) === '') {
// 		preLoader(tl);
// 	} else {
// 	}
// });

var imgSlider = new Swiper('.imgSlider', {
	loop: true,
	// autoplay: true,
	slidesPerView: 1,
	autoplay: {
        delay: 2500,
        disableOnInteraction: false,
      },
	// If we need pagination

	breakpoints: {
		1024: {
			slidesPerView: 4,
			spaceBetween: 20
		},
		768: {
			slidesPerView: 3,
			spaceBetween: 15
		},
		640: {
			slidesPerView: 2,
			spaceBetween: 15
		},
		576: {
			slidesPerView: 2,
			spaceBetween: 10
		},
		375: {
			slidesPerView: 1,
			spaceBetween: 10
		}
	},

	// Navigation arrows
	// navigation: {
	// 	nextEl: '.swiper-button-next',
	// 	prevEl: '.swiper-button-prev'
	// },
	// pagination: {
	// 	el: '.swiper-pagination'
	// 	// type: 'fraction'
	// },

	// And if we need scrollbar
	scrollbar: {
		el: '.swiper-scrollbar'
	}
});

var clientSlider = new Swiper('.clientSlider', {
	loop: true,
	slidesPerView: 4,
	spaceBetween: 20,
	autoplay: {
        delay: 2500,
        disableOnInteraction: false,
      },
	// If we need pagination

	breakpoints: {
		1024: {
			slidesPerView: 3,
			spaceBetween: 25
		},
		768: {
			slidesPerView: 3,
			spaceBetween: 20
		},
		640: {
			slidesPerView: 2,
			spaceBetween: 10
		},
		576: {
			slidesPerView: 2,
			spaceBetween: 10
		},
		375: {
			slidesPerView: 1,
			spaceBetween: 10
		}
	},

	// Navigation arrows
	navigation: {
		nextEl: '.swiper-button-next',
		prevEl: '.swiper-button-prev'
	},

	// And if we need scrollbar
	scrollbar: {
		el: '.swiper-scrollbar'
	}
});

var articleSlider = new Swiper('.articleSlider', {
	loop: true,
	slidesPerView: 3,
	spaceBetween: 20,
	autoplay: {
        delay: 2500,
        disableOnInteraction: false,
      },
	// If we need pagination

	breakpoints: {
		1024: {
			slidesPerView: 3,
			spaceBetween: 25
		},
		768: {
			slidesPerView: 3,
			spaceBetween: 20
		},
		640: {
			slidesPerView: 2,
			spaceBetween: 10
		},
		576: {
			slidesPerView: 2,
			spaceBetween: 10
		},
		375: {
			slidesPerView: 1,
			spaceBetween: 10
		}
	},

	// Navigation arrows
	navigation: {
		nextEl: '.swiper-button-next',
		prevEl: '.swiper-button-prev'
	},

	// And if we need scrollbar
	scrollbar: {
		el: '.swiper-scrollbar'
	}
});


function mousecursor() {
	if ($('body')) {
		const e = document.querySelector('.cursor-inner'),
			t = document.querySelector('.cursor-outer');
		let n,
			i = 0,
			o = !1;
		(window.onmousemove = function (s) {
			o || (t.style.transform = 'translate(' + s.clientX + 'px, ' + s.clientY + 'px)'), (e.style.transform = 'translate(' + s.clientX + 'px, ' + s.clientY + 'px)'), (n = s.clientY), (i = s.clientX);
		}),
			$('body').on('mouseenter', 'a, img, .cursor-pointer', function () {
				e.classList.add('cursor-hover'), t.classList.add('cursor-hover');
			}),
			$('body').on('mouseleave', 'a, img, .cursor-pointer', function () {
				($(this).is('a, img') && $(this).closest('.cursor-pointer').length) || (e.classList.remove('cursor-hover'), t.classList.remove('cursor-hover'));
			}),
			(e.style.visibility = 'visible'),
			(t.style.visibility = 'visible');
	}
}

$(function () {
	mousecursor();
});


document.addEventListener("DOMContentLoaded", function () {
	const progressBars = document.querySelectorAll('.progress-bar');

	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const progressBar = entry.target;
				const progressText = progressBar.querySelector('.progress-text');
				const progress = progressBar.getAttribute('data-progress');
				let width = 0;

				const interval = setInterval(() => {
					if (width >= progress) {
						clearInterval(interval);
					} else {
						width++;
						progressBar.style.width = `${width}%`;
						progressText.textContent = `${width}%`;
					}
				}, 20); // Adjust speed of animation
			}
		});
	}, { threshold: 0.5 }); // Trigger when 50% of the section is visible

	progressBars.forEach(bar => {
		observer.observe(bar);
	});
});


function lenisSetup() {
	const lenis = new Lenis({
		duration: 1.2,
		easing: (t) => (t === 1 ? 1 : 1 - Math.pow(2, -10 * t)),
		direction: "vertical",
		gestureDirection: "vertical",
		smooth: true,
		smoothTouch: false,
		touchMultiplier: 2,
	})
	lenis.scrollTo(document.querySelector('.scrolllenis'))

	function raf(time) {
		lenis.raf(time)
		requestAnimationFrame(raf)
	}

	requestAnimationFrame(raf);
}
lenisSetup();

// AOS.init({
// 	duration: 1200
// });

$(function () {
	AOS.init({
		duration: 1200,
		disable: function () {
			var maxWidth = 1200;
			return window.innerWidth < maxWidth;
		}
	});
})
